.sortable_tree_wrapper
  %ul.sortable_tree{data: {'sortable-url' => options[:sort_url]} }
    - items.each do |root, children|
      = render 'sortable_tree/sortable_item', item: root, options: options
      /%li{id: "item_#{root.id}"}
      /  .item
      /    %span
      /      =root.send(options[:name_method] || :name)
      /    .cell.right.controls
      /      - if options[:controls_partial]
      /        = render options[:controls_partial], item: root
      /  = sortable_tree_render_nested_groups(children, options.merge({list_tag: :ul, element_class: 'item'}))
:javascript
  $(document).ready(function(){
    $('.sortable_tree').nestedSortable({
        forceHelperSizeType: true,
        errorClass: 'cantdoit',
        disableNesting: 'cantdoit',
        handle: '> .item .handle',
        helper:	'clone',
        listType: 'ul',
        items: 'li',
        opacity: 0.6,
        placeholder: 'placeholder',
        revert: 250,
        maxLevels: #{options[:max_levels] || 0},
        //tabSize: 20,
        // protectRoot: $(this).data('protect-root'),

        // prevent drag flickers
        tolerance: 'pointer',
        toleranceElement: '> div',
        isTree: true,
        startCollapsed: false,
        //startCollapsed: $(this).data("start-collapsed"),

        relocate: function(){
            //$(this).nestedSortable("disable");
            var data = $(this).nestedSortable("serialize");
            var url = $(this).data("sortable-url");

            // update on server
            $.ajax({
               url: url,
               type: "post",
               data: data
            }).always(function(){
              //$(this).nestedSortable("enable");

              $(this).find('.item').each(function(index){
                if (index % 2){
                  $(this).removeClass('odd').addClass('even');
                }else{
                  $(this).removeClass('even').addClass('odd');
                }
              });

            }).done(function(data){

            }).fail(function(jqXHR, textStatus){

            });


            //$(this).nestedSortable("enable");
        }
    }); // nested tree
  }); // document.ready


